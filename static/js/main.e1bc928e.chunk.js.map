{"version":3,"sources":["Effects.js","state/appState.js","hooks/useFBM.js","components/BeveledHexagonGeometry.jsx","components/ScatterHexagonMesh.jsx","hooks/useColor.js","components/Lights.jsx","components/GUI.jsx","hooks/useGPUTier.js","hooks/useTreeColors.js","components/Trees.jsx","components/Grass.jsx","components/Clouds.jsx","App.js","hooks/useHexagonScatter.js","index.js"],"names":["Effects","composer","useRef","useThree","scene","gl","size","camera","useEffect","current","setSize","width","height","useFrame","render","ref","args","attachArray","FXAAShader","renderToScreen","kernelRadius","maxDistance","extend","EffectComposer","ShaderPass","RenderPass","SSAOPass","UnrealBloomPass","create","set","colors","Water","value","color","Shore","Beach","Shrub","Forest","Stone","Snow","setColorValue","key","produce","state","setColor","generation","Seed","Math","random","Height","Scale","Detail","Fuzzyness","setGeneration","general","Trees","Grass","Clouds","setGeneral","useFBM","seaLevel","settings","appState","s","fbm","useMemo","FBM","seed","lacunarity","persistance","vec3","pow","MathUtils","mapLinear","get2","Vector2","x","y","BeveledHexagonGeometry","rest","shape","THREE","moveTo","cos","sin","i","lineTo","PI","steps","depth","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","tempV4","Terrain","points","noise","Color","hsl","getHSL","h","l","setHSL","useColor","generate","useCallback","scale","mesh","forEach","point","position","copy","setScalar","multiplyScalar","updateMatrix","p","clone","n","c","z","setMatrixAt","matrix","setColorAt","instanceMatrix","needsUpdate","instanceColor","useSpring","onChange","start","from","to","castShadow","receiveShadow","length","shadowSide","FrontSide","side","Lights","intensity","shadowBias","GUI","tier","useState","gpuTier","setGpuTier","a","getGPUTier","useGPUTier","useControls","res","Object","keys","param","v","set2","min","max","Regenerate","button","console","log","collapsed","useTreeColors","treeColors","regular","snow","r","floor","group","useGLTF","nodes","materials","noise2","refs","pointsClone","_","arr","index","splice","removeItemOnce","randFloat","rotation","dispose","push","geometry","SM_Env_Tree_Pine_01","SM_Env_Tree_Pine_02002","preload","SM_Env_Grass_Patch_03","Array","fill","map","pos","Vector3","rate","dt","abs","SM_Generic_Cloud_01","SM_Generic_Cloud_02","SM_Generic_Cloud_03","React","memo","App","radius","gap","pts","unit","angle","axis","axisVector","sideVector","applyAxisAngle","tempV3","seg","ax","sd","addScaledVector","useHexagonScatter","shadows","antialias","toneMappingExposure","shadowMap","enabled","type","PCFSoftShadowMap","outputEncoding","sRGBEncoding","fallback","Environment","preset","OrbitControls","autoRotate","autoRotateSpeed","enablePan","className","target","href","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"uQAWe,SAASA,IACtB,IAAMC,EAAWC,mBACjB,EAAoCC,cAA5BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,GAAIC,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,OAKzB,OAJAC,qBAAU,iBAAM,OAAKP,QAAL,IAAKA,GAAL,UAAKA,EAAUQ,eAAf,OAAK,EAAmBC,QAAQJ,EAAKK,MAAOL,EAAKM,UAAS,CACxEN,IAEFO,aAAS,+BAAMZ,QAAN,IAAMA,GAAN,UAAMA,EAAUQ,eAAhB,aAAM,EAAmBK,WAAU,GAE1C,iCAAgBC,IAAKd,EAAUe,KAAM,CAACX,GAAtC,UACE,4BAAYY,YAAY,SAASb,MAAOA,EAAOG,OAAQA,IAEvD,4BACEU,YAAY,SACZD,KAAM,CAACE,KACP,qCAAoC,CAAC,EAAIZ,EAAKK,MAAO,EAAIL,EAAKM,QAC9DO,gBAAc,IAEhB,0BACEF,YAAY,SACZD,KAAM,CAACZ,EAAOG,GACda,aAAc,GACdC,YAAa,QAvBrBC,YAAO,CAAEC,mBAAgBC,eAAYC,eAAYC,aAAUC,sB,4CCG5CC,OAAO,SAACC,GAAD,MAAU,CAC9BC,OAAQ,CACNC,MAAO,CACLC,MAAO,IACPC,MAAO,WAETC,MAAO,CACLF,MAAO,IACPC,MAAO,WAETE,MAAO,CACLH,MAAO,IACPC,MAAO,WAETG,MAAO,CACLJ,MAAO,GACPC,MAAO,WAETI,OAAQ,CACNL,MAAO,IACPC,MAAO,WAETK,MAAO,CACLN,MAAO,IACPC,MAAO,WAETM,KAAM,CACJP,MAAO,GACPC,MAAO,YAIXO,cAAe,SAACC,EAAKT,GAAN,OACbH,EACEa,aAAQ,SAACC,GACPA,EAAMb,OAAOW,GAAKT,MAAQA,OAGhCY,SAAU,SAACH,EAAKR,GAAN,OACRJ,EACEa,aAAQ,SAACC,GACPA,EAAMb,OAAOW,GAAKR,MAAQA,OAIhCY,WAAY,CACVC,KAAMC,KAAKC,SACXC,OAAQ,EACRC,MAAO,GACPC,OAAQ,GACRC,UAAW,KAIbC,cAAe,SAACZ,EAAKT,GAAN,OACbH,EACEa,aAAQ,SAACC,GACPA,EAAME,WAAWJ,GAAOT,OAI9BsB,QAAS,CACPC,OAAO,EACPC,OAAO,EACPC,QAAQ,GAEVC,WAAY,SAACjB,EAAKT,GAAN,OACVH,EACEa,aAAQ,SAACC,GACPA,EAAMW,QAAQb,GAAOT,W,oBC5Ed,SAAS2B,EAAOC,EAAUC,GACvC,IAAMhB,EAAaiB,GAAS,SAACC,GAAD,OAAOA,EAAElB,cAE/BmB,EAAMC,mBACV,kBACE,IAAIC,IAAJ,aACEC,KAAMtB,EAAWC,KACjBsB,WAAgC,EAApBvB,EAAWM,OACvBkB,YAAoC,EAAvBxB,EAAWO,WAErBS,MAEP,CAACA,EAAUhB,IAGb,OAAO,SAACyB,GAAD,OACLvB,KAAKwB,IACHC,YAAUC,UACRT,EAAIU,KAAK,IAAIC,UAAQL,EAAKM,EAAGN,EAAKO,KACjC,EACD,EACA,EACA,GAEF,I,uBC1BS,SAASC,EAAT,GAAyD,IAAD,IAAtBxE,YAAsB,MAAf,GAAe,EAARyE,EAAQ,iBAC/DC,EAAQf,mBAAQ,WACpB,IAAMe,EAAQ,IAAIC,QAKlBD,EAAME,OAHM,EAGW5E,EAAOyC,KAAKoC,IAAI,GAF3B,EAEyC7E,EAAOyC,KAAKqC,IAAI,IAErE,IAAK,IAAIC,EAAI,EAAGA,GANF,EAMcA,GAAK,EAC/BL,EAAMM,OANI,EAOEhF,EAAOyC,KAAKoC,IAAS,EAAJE,EAAQtC,KAAKwC,GAR9B,GAEF,EAOEjF,EAAOyC,KAAKqC,IAAS,EAAJC,EAAQtC,KAAKwC,GAT9B,IAYd,OAAOP,IACN,CAAC1E,IAEEuD,EAAWI,mBACf,iBAAO,CACLuB,MAAO,EACPC,MAAO,GACPC,cAAc,EACdC,eAAgB,GAChBC,UAAW,GACXC,YAAa,EACbC,cAAe,KAEjB,IAGF,OAAO,6CAAiB9E,KAAM,CAACgE,EAAOnB,IAAekB,I,YCxBjDgB,EAAS,IAAId,WAEJ,SAASe,EAAT,GAA8B,IAAXC,EAAU,EAAVA,OAC1BnE,EAASgC,GAAS,SAACC,GAAD,OAAOA,EAAEjC,UAC3Be,EAAaiB,GAAS,SAACC,GAAD,OAAOA,EAAElB,cAE/BqD,EAAQvC,EAAO7B,EAAOC,MAAMC,OAC5BjB,EAAMb,mBACN+B,ECdO,WACb,IAAMH,EAASgC,GAAS,SAACC,GAAD,OAAOA,EAAEjC,UAEjC,OAAO,SAAClB,GACN,IAAMqB,EACArB,GAAUkB,EAAOC,MAAMC,MAClB,IAAImE,QAAMrE,EAAOC,MAAME,OACrBrB,GAAUkB,EAAOC,MAAMC,MAAQF,EAAOI,MAAMF,MAC9C,IAAImE,QAAMrE,EAAOI,MAAMD,OACrBrB,GAAUkB,EAAOC,MAAMC,MAAQF,EAAOK,MAAMH,MAC9C,IAAImE,QAAMrE,EAAOK,MAAMF,OACrBrB,GAAUkB,EAAOC,MAAMC,MAAQF,EAAOM,MAAMJ,MAC9C,IAAImE,QAAMrE,EAAOM,MAAMH,OACrBrB,GAAUkB,EAAOC,MAAMC,MAAQF,EAAOO,OAAOL,MAC/C,IAAImE,QAAMrE,EAAOO,OAAOJ,OACtBrB,GAAUkB,EAAOC,MAAMC,MAAQF,EAAOQ,MAAMN,MAC9C,IAAImE,QAAMrE,EAAOQ,MAAML,OAEvB,IAAIkE,QAAMrE,EAAOS,KAAKN,OAS3BmE,EAAMnE,EAAMoE,OALV,CACNC,EAAG,EACHvC,EAAG,EACHwC,EAAG,IAkBL,OAfAtE,EAAMuE,OACJJ,EAAIE,EACI,IAARF,EAAIrC,EACJqC,EAAIG,GACD3F,GAAUkB,EAAOC,MAAMC,MACpBwC,YAAUC,UACR1B,KAAKwB,IAAI,EAAoC,KAA/BzC,EAAOC,MAAMC,MAAQpB,GAAe,GAClD,EACA,EACA,EACA,KAEF,IAGDqB,GD7BKwE,CAAS3E,EAAOC,MAAMC,OAE9B0E,EAAWC,uBACf,SAACC,GACC,GAAI7F,EAAIN,QAAS,CACf,IAAMoG,EAAO9F,EAAIN,QAEjBwF,EAAOa,SAAQ,SAACC,EAAO1B,GACrBU,EAAOiB,SAASC,KAAKF,GACrBhB,EAAOa,MAAMM,UAAU,KAEnBN,GACFb,EAAOa,MAAMO,eAAeP,GAG9Bb,EAAOqB,eAEP,IAAMC,EAAItB,EAAOiB,SAASM,QAAQH,eAAetE,EAAWK,OACxDqE,EAAIrB,EAAMmB,GAAKxE,EAAWI,OACxBuE,EAAIvF,EAAMsF,GAEZA,GAAKzF,EAAOC,MAAMC,QAAOuF,EAAIzF,EAAOC,MAAMC,OAE9C+D,EAAOa,MAAMa,GAAK,GAAKF,EAEvBxB,EAAOqB,eACPP,EAAKa,YAAYrC,EAAGU,EAAO4B,QAE3Bd,EAAKe,WAAWvC,EAAGmC,MAErBX,EAAKgB,eAAeC,aAAc,EAClCjB,EAAKkB,cAAcD,aAAc,KAGrC,CAAC7B,EAAQC,EAAOjE,EAAOH,EAAQe,IAGjC,EAAkBmF,oBAAU,CAC1BpB,MAAO,EACPqB,SAAU,YAA2B,IAAfrB,EAAc,EAAvB5E,MAAS4E,MACpBF,EAASE,MAHLA,EAAR,EAAQA,MAeR,OARApG,qBAAU,WACRoG,EAAMsB,MAAM,CAAEC,KAAM,EAAGC,GAAI,MAC1B,IAEH5H,qBAAU,WACRkG,MACC,CAACA,IAGF,gCACE,gCACE2B,YAAU,EACVC,eAAa,EACbvH,IAAKA,EACLC,KAAM,CAAC,KAAM,KAAMiF,EAAOsC,QAJ5B,UAME,cAACzD,EAAD,IACA,mCACE0D,WAAYC,YACZC,KAAMD,mBE7ED,SAASE,IACtB,IAAM5H,EAAMb,mBAIZ,OACE,kCACE,iCACEc,KAAM,CACJ,QACA,gBACA,MAGJ,kCACED,IAAKA,EACLsH,YAAU,EACVrB,SAAU,EAAE,EAAG,GAAI,GACnB4B,UAAW,IACXC,YAAa,KACb5G,MAAM,WAER,kCACE+E,SAAU,CAAC,EAAG,EAAG,GACjB4B,UAAW,Q,6CCtBJ,SAASE,IACtB,IAAMhH,EAASgC,GAAS,SAACC,GAAD,OAAOA,EAAEjC,UAC3Be,EAAaiB,GAAS,SAACC,GAAD,OAAOA,EAAElB,cAC/BS,EAAUQ,GAAS,SAACC,GAAD,OAAOA,EAAET,WAC5Bd,EAAgBsB,GAAS,SAACC,GAAD,OAAOA,EAAEvB,iBAClCkB,EAAaI,GAAS,SAACC,GAAD,OAAOA,EAAEL,cAC/Bd,EAAWkB,GAAS,SAACC,GAAD,OAAOA,EAAEnB,YAC7BS,EAAgBS,GAAS,SAACC,GAAD,OAAOA,EAAEV,iBAElC0F,ECZO,WACb,MAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANA1I,qBAAU,WACR,sBAAC,sBAAA2I,EAAA,kEACCD,EADD,SACmBE,cADnB,mBACiCL,MADjC,wDAAD,KAGC,IAEIE,EDGMI,GAEb,EAAiBC,YACf,WACA,WACE,IAAMC,EAAM,GASZ,OARAC,OAAOC,KAAKnG,GAASwD,SAAQ,SAAC4C,GAC5BH,EAAIG,GAAS,CACX1H,MAAOsB,EAAQoG,GAEfzB,SAAU,SAAC0B,GAAD,OAAOjG,EAAWgG,EAAOC,QAIhCJ,IAET,CAACjG,EAASI,IAdHkG,EAAT,oBAiBAN,YACE,SACA,WACE,IAAMC,EAAM,GAeZ,OAdAC,OAAOC,KAAK3H,GAAQgF,SAAQ,SAAC7E,GAC3BsH,EAAItH,GAAS,CACXD,MAAOF,EAAOG,GAAOD,MACrB6H,IAAK,EACLC,IAAK,EACL7B,SAAU,SAAC0B,GAAD,OAAOnH,EAAcP,EAAO0H,KAGxCJ,EAAItH,EAAQ,UAAY,CACtBD,MAAOF,EAAOG,GAAOA,MACrBgG,SAAU,SAAC0B,GAAD,OAAO/G,EAASX,EAAO0H,QAI9BJ,IAET,CAACzH,EAAQU,EAAeI,IAG1B,MAAiB0G,YACf,cACA,WACE,IAAMC,EAAM,GAUZ,OATAC,OAAOC,KAAK5G,GAAYiE,SAAQ,SAAC4C,GAC/BH,EAAIG,GAAS,CACX1H,MAAOa,EAAW6G,GAClBG,IAAK,EACLC,IAAK,EACL7B,SAAU,SAAC0B,GAAD,OAAOtG,EAAcqG,EAAOC,QAInCJ,IAET,CAAC1G,EAAYQ,IAff,mBAAUxB,GAAV,WAwCA,OAtBAyH,YACE,CACES,WAAYC,aAAO,kBAAMnI,EAAI,CAAEiB,KAAMC,KAAKC,eAE5C,CAACnB,IAGHrB,qBAAU,WACRyJ,QAAQC,IAAInB,GACRA,IACEA,EAAO,GACTa,EAAK,CAAErG,OAAO,IAEZwF,EAAO,GACTa,EAAK,CAAEpG,OAAO,IAEZuF,EAAO,GACTa,EAAK,CAAErG,OAAO,EAAOC,OAAO,OAG/B,CAACuF,IAEG,cAAC,IAAD,CAAMoB,WAAS,I,oBE7FT,SAASC,IACtB,IAAMtI,EAASgC,GAAS,SAACC,GAAD,OAAOA,EAAEjC,UAE3BuI,EAAapG,mBACjB,iBAAO,CACLqG,QAAS,CACP,UACA,UACA,WAEFC,KAAM,CACJ,cAGJ,IAGF,OAAO,SAAC3J,GACN,GAAIA,GAAUkB,EAAOC,MAAMC,MAAQF,EAAOQ,MAAMN,MAAO,CACrD,IAAMwI,EACJH,EAAWE,KAAKxH,KAAK0H,MAAM1H,KAAKC,SAAWqH,EAAWE,KAAKhC,SAC7D,OAAO,IAAIpC,QAAMqE,GAEnB,IAAMA,EACJH,EAAWC,QAAQvH,KAAK0H,MAAM1H,KAAKC,SAAWqH,EAAWC,QAAQ/B,SACnE,OAAO,IAAIpC,QAAMqE,ICnBrB,IAAMzE,EAAS,IAAId,WAEJ,SAAS1B,EAAT,GAA4B,IAAX0C,EAAU,EAAVA,OACxByE,EAAQxK,mBACR4B,EAASgC,GAAS,SAACC,GAAD,OAAOA,EAAEjC,UAC3Be,EAAaiB,GAAS,SAACC,GAAD,OAAOA,EAAElB,cAErC,EAA6B8H,YAAQ,qBAA7BC,EAAR,EAAQA,MACF3I,GADN,EAAe4I,UACDT,KACRlE,EAAQvC,EAAO7B,EAAOC,MAAMC,OAC5B8I,EAASnH,EAAO7B,EAAOC,MAAMC,MAAO,CACxCmC,KAAwB,IAAlBtB,EAAWC,OAGbiI,EAAO7K,iBAAO,IAEd8K,EAAc/G,mBAAQ,WAC1B,IAAM+G,EAAW,YAAO/E,GAMxB,OALA+E,EAAYlE,SAAQ,SAACmE,EAAG5F,GAClBtC,KAAKC,SAAW,IAiF1B,SAAwBkI,EAAKC,GACvBA,GAAS,GACXD,EAAIE,OAAOD,EAAO,GAlFdE,CAAeL,EAAa3F,MAGzB2F,IACN,CAAC/E,IAwCJ,OAtCAzF,qBAAU,WACRuK,EAAKtK,QAAQqG,SAAQ,SAACD,GACpBmE,EAAYlE,SAAQ,SAACC,EAAO1B,GAC1BU,EAAOiB,SAASC,KAAKF,EAAMO,QAAQH,eAAe,MAClDpB,EAAOqB,eAEP,IAAMC,EAAIN,EAAMO,QAAQH,eAAetE,EAAWK,OAC9CqE,EAAIrB,EAAMmB,GAAKxE,EAAWI,OAE9B8C,EAAOiB,SAASS,EAAQ,IAAJF,EACpBxB,EAAOiB,SAASpC,GAAKJ,YAAU8G,WAAW,EAAG,GAC7CvF,EAAOiB,SAASnC,GAAKL,YAAU8G,WAAW,EAAG,GAE7CvF,EAAOwF,SAAS3G,EAAI7B,KAAKwC,GAGtBgC,EAAIzF,EAAOC,MAAMC,MAAQF,EAAOM,MAAMJ,OACrCuF,EAAIzF,EAAOC,MAAMC,MAAQF,EAAOO,OAAOL,OACzCuF,EAAIzF,EAAOC,MAAMC,MAAQF,EAAOQ,MAAMN,MAEtC+D,EAAOa,MAAMM,UACX1C,YAAUC,UAAUqG,EAAO/D,GAAQ,EAAG,EAAG,IAAM,MAGjDhB,EAAOa,MAAMM,UAAU,GAGzBnB,EAAOqB,eACPP,EAAKa,YAAYrC,EAAGU,EAAO4B,QAE3B,IAAMH,EAAIvF,EAAMsF,GAChBV,EAAKe,WAAWvC,EAAGmC,MAErBX,EAAKgB,eAAeC,aAAc,EAClCjB,EAAKkB,cAAcD,aAAc,OAElC,CAACiD,EAAMC,EAAa9E,EAAO4E,EAAQhJ,EAAQe,IAG5C,wBAAO9B,IAAK2J,EAAOc,QAAS,KAA5B,UACE,+BACEzK,IAAK,SAACyJ,GAAD,OAAOA,GAAKO,EAAKtK,QAAQgL,KAAKjB,IACnCnC,YAAU,EACVC,eAAa,EACboD,SAAUd,EAAMe,oBAAoBD,SACpCH,SAAU,CAAC,EAAG,EAAG,GACjB3E,MAAO,CAAC,IAAM,IAAM,KACpB5F,KAAM,CAAC,KAAM,KAAMgK,EAAYzC,QAPjC,SASE,mCACEC,WAAYC,YACZC,KAAMD,gBAGV,+BACE1H,IAAK,SAACyJ,GAAD,OAAOA,GAAKO,EAAKtK,QAAQgL,KAAKjB,IACnCnC,YAAU,EACVC,eAAa,EACboD,SAAUd,EAAMgB,uBAAuBF,SACvCH,SAAU,CAAC,EAAG,EAAG,GACjB3E,MAAO,CAAC,IAAM,IAAM,KACpB5F,KAAM,CAAC,KAAM,KAAMgK,EAAYzC,QAPjC,SASE,mCACEC,WAAYC,YACZC,KAAMD,mBAOhBkC,IAAQkB,QAAQ,qBClGhB,IAAM9F,EAAS,IAAId,WAEJ,SAASzB,EAAT,GAA4B,IAAXyC,EAAU,EAAVA,OACxByE,EAAQxK,mBACR4B,EAASgC,GAAS,SAACC,GAAD,OAAOA,EAAEjC,UAC3Be,EAAaiB,GAAS,SAACC,GAAD,OAAOA,EAAElB,cAErC,EAA6B8H,YAAQ,qBAA7BC,EAAR,EAAQA,MACF3I,GADN,EAAe4I,UACDT,KACRlE,EAAQvC,EAAO7B,EAAOC,MAAMC,OAC5B8I,EAASnH,EAAO7B,EAAOC,MAAMC,MAAO,CACxCmC,KAAwB,IAAlBtB,EAAWC,OAGbiI,EAAO7K,iBAAO,IAEd8K,EAAc/G,mBAAQ,WAC1B,IAAM+G,EAAW,YAAO/E,GAOxB,OANA+E,EAAYlE,SAAQ,SAACmE,EAAG5F,GAClBtC,KAAKC,SAAW,IAoE1B,SAAwBkI,EAAKC,GACvBA,GAAS,GACXD,EAAIE,OAAOD,EAAO,GArEdE,CAAeL,EAAa3F,MAGhC2F,EAAYS,KAAZ,MAAAT,EAAW,YAASA,GAAT,mBAAyBA,KAC7BA,IACN,CAAC/E,IAuCJ,OArCAzF,qBAAU,WACRuK,EAAKtK,QAAQqG,SAAQ,SAACD,GACpBmE,EAAYlE,SAAQ,SAACC,EAAO1B,GAC1BU,EAAOiB,SAASC,KAAKF,EAAMO,QAAQH,eAAe,MAClDpB,EAAOqB,eAEP,IAAMC,EAAIN,EAAMO,QAAQH,eAAetE,EAAWK,OAC9CqE,EAAIrB,EAAMmB,GAAKxE,EAAWI,OAE9B8C,EAAOiB,SAASS,EAAQ,IAAJF,EACpBxB,EAAOiB,SAASpC,GAAKJ,YAAU8G,WAAW,EAAG,GAC7CvF,EAAOiB,SAASnC,GAAKL,YAAU8G,WAAW,EAAG,GAE7CvF,EAAOwF,SAAS3G,EAAI7B,KAAKwC,GAGvBgC,EAAIzF,EAAOC,MAAMC,MAAQF,EAAOK,MAAMH,OACtCuF,EAAIzF,EAAOC,MAAMC,MAAQF,EAAOO,OAAOL,MAEvC+D,EAAOa,MAAMM,UACX1C,YAAUC,UAAUqG,EAAO/D,GAAQ,EAAG,EAAG,GAAK,KAGhDhB,EAAOa,MAAMM,UAAU,GAGzBnB,EAAOqB,eACPP,EAAKa,YAAYrC,EAAGU,EAAO4B,QAE3B,IAAMH,EAAIvF,EAAMsF,GAChBV,EAAKe,WAAWvC,EAAGmC,MAErBX,EAAKgB,eAAeC,aAAc,EAClCjB,EAAKkB,cAAcD,aAAc,OAElC,CAACiD,EAAMC,EAAa9E,EAAO4E,EAAQhJ,EAAQe,IAG5C,uBAAO9B,IAAK2J,EAAOc,QAAS,KAA5B,SACE,+BACEzK,IAAK,SAACyJ,GAAD,OAAOA,GAAKO,EAAKtK,QAAQgL,KAAKjB,IACnCnC,YAAU,EACVC,eAAa,EACboD,SAAUd,EAAMkB,sBAAsBJ,SACtCH,SAAU,CAAC,EAAG,EAAG,GACjB3E,MAAO,CAAC,IAAM,IAAM,KACpBI,SAAU,CAAC,EAAG,EAAG,MACjBhG,KAAM,CAAC,KAAM,KAAMgK,EAAYzC,QARjC,SAUE,mCACEC,WAAYC,YACZC,KAAMD,kBAOhBkC,IAAQkB,QAAQ,qBCxFhB,IAAM9F,EAAS,IAAId,WAEnB,SAASxB,IACP,IAAQmH,EAAUD,YAAQ,qBAAlBC,MAEFG,EAAO7K,iBAAO,IAEd+F,EAAShC,mBAAQ,WACrB,OAAO,IAAI8H,MAAM,IAAIC,KAAK,GAAGC,KAAI,iBAAO,CACtCC,IAAK,IAAIC,UACP3H,YAAU8G,WAAW,EAAG,GACxB9G,YAAU8G,WAAW,EAAG,GACxB9G,YAAU8G,WAAW,EAAG,IACxBnE,eAAe,IACjBP,MAAOpC,YAAU8G,UAAU,GAAK,IAChCc,KAAM5H,YAAU8G,UAAU,EAAG,UAE9B,IAyBH,OAvBAzK,aAAS,SAACoK,EAAGoB,GACXtB,EAAKtK,QAAQqG,SAAQ,SAACD,GACpBZ,EAAOa,SAAQ,SAACC,EAAO1B,GACrBU,EAAOiB,SAASC,KAAKF,EAAMmF,IAAI5E,SAE/BP,EAAMmF,IAAItH,GAAKyH,EAAKtF,EAAMqF,KACtBrF,EAAMmF,IAAItH,EAAI,MAChBmC,EAAMmF,IAAItH,GAAK,IACfmC,EAAMmF,IAAIrH,EAAIL,YAAU8G,WAAW,IAAK,MAG1C,IAAM1E,EAAQ7D,KAAKwB,IAAI,EAAIxB,KAAKuJ,IAAIvF,EAAMmF,IAAItH,EAAI,KAAM,IACxDmB,EAAOa,MAAMM,UAAUH,EAAMH,OAAOO,eAAeP,GAEnDb,EAAOwF,SAAS3G,EAAI7B,KAAKwC,GAEzBQ,EAAOqB,eACPP,EAAKa,YAAYrC,EAAGU,EAAO4B,WAE7Bd,EAAKgB,eAAeC,aAAc,QAKpC,wBAAO0D,QAAS,KAAMxE,SAAU,CAAC,EAAG,EAAG,KAAvC,UACE,+BACEjG,IAAK,SAACyJ,GAAD,OAAOA,GAAKO,EAAKtK,QAAQgL,KAAKjB,IACnCnC,YAAU,EACVC,eAAa,EACboD,SAAUd,EAAM2B,oBAAoBb,SACpCH,SAAU,CAAC,EAAG,EAAG,GACjB3E,MAAO,CAAC,IAAM,IAAM,KACpB5F,KAAM,CAAC,KAAM,KAAMiF,EAAOsC,QAP5B,SASE,mCACEC,WAAYC,YACZC,KAAMD,gBAGV,+BACE1H,IAAK,SAACyJ,GAAD,OAAOA,GAAKO,EAAKtK,QAAQgL,KAAKjB,IACnCnC,YAAU,EACVC,eAAa,EACboD,SAAUd,EAAM4B,oBAAoBd,SACpCH,SAAU,CAAC,EAAG,EAAG,GACjB3E,MAAO,CAAC,IAAM,IAAM,KACpB5F,KAAM,CAAC,KAAM,KAAMiF,EAAOsC,QAP5B,SASE,mCACEC,WAAYC,YACZC,KAAMD,gBAGV,+BACE1H,IAAK,SAACyJ,GAAD,OAAOA,GAAKO,EAAKtK,QAAQgL,KAAKjB,IACnCnC,YAAU,EACVC,eAAa,EACboD,SAAUd,EAAM6B,oBAAoBf,SACpCH,SAAU,CAAC,EAAG,EAAG,GACjB3E,MAAO,CAAC,IAAM,IAAM,KACpB5F,KAAM,CAAC,KAAM,KAAMiF,EAAOsC,QAP5B,SASE,mCACEC,WAAYC,YACZC,KAAMD,mBAOhBkC,IAAQkB,QAAQ,qBAEDa,UAAMC,KAAKlJ,GCnFX,SAASmJ,IACtB,IAAM3G,ECdO,WAGZ,IAFD4G,EAEA,uDAFS,EACTC,EACA,uDADM,EA6BN,OA3Be7I,mBAAQ,WACrB,IAAI8I,EAAM,GACVA,EAAItB,KAAK,IAAIxG,WASb,IARA,IAAI+H,EAAa,KAANF,EAEPG,EAAQlK,KAAKwC,GAAK,EAClB2H,EAAO,IAAIjI,UAAc,EAAG,EAAG,GAE/BkI,EAAa,IAAIlI,UAAc,GAAI+H,EAAM,GACzCI,EAAa,IAAInI,UAAc,EAAG+H,EAAM,GAAGK,eAAeH,GAAOD,GACjEK,EAAS,IAAIrI,UACRsI,EAAM,EAAGA,EAAM,EAAGA,IACzB,IAAK,IAAIC,EAAK,EAAGA,GAAMX,EAAQW,IAC7B,IAAK,IAAIC,EAAK,EAAGA,EAAKD,EAAIC,IACxBH,EACGrG,KAAKkG,GACLhG,eAAeqG,GACfE,gBAAgBN,EAAYK,GAC5BJ,eAAeH,EAAMD,EAAQM,GAEhCR,EAAItB,MAAK,IAAIxG,WAAgBgC,KAAKqG,IAIxC,OAAOP,IACN,CAACF,EAAQC,IDfGa,CAAkB,IAC3BrK,EAAUQ,GAAS,SAACC,GAAD,OAAOA,EAAET,WAElC,OACE,qCACE,cAACwF,EAAD,IACA,eAAC,IAAD,CACE8E,SAAO,EACPvN,GAAI,CACFwN,WAAW,EACXC,oBAAqB,GACrBC,UAAW,CACTC,SAAS,EACTC,KAAMC,oBAERC,eAAgBC,gBAElB7N,OAAQ,CACNyG,SAAU,CAAC,EAAG,EAAG,IAZrB,UAeE,eAAC,WAAD,CAAUqH,SAAU,KAApB,UACE,wBAAO,cAAatL,KAAKwC,GAAK,EAA9B,UACGjC,EAAQC,OAAS,cAACA,EAAD,CAAO0C,OAAQA,IAChC3C,EAAQE,OAAS,cAACA,EAAD,CAAOyC,OAAQA,IAChC3C,EAAQG,QAAU,cAAC,EAAD,IACnB,cAACuC,EAAD,CAASC,OAAQA,OAEnB,cAACqI,EAAA,EAAD,CAAaC,OAAO,WACpB,cAACC,EAAA,EAAD,CAAeC,YAAU,EAACC,gBAAiB,GAAKC,WAAW,IAE3D,cAAC3O,EAAD,OAGF,cAAC2I,EAAD,OAEF,sBAAKiG,UAAU,OAAf,sCACkB,IAChB,mBAAGC,OAAO,SAASC,KAAK,kCAAxB,gCElDR,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASpO,OACP,cAAC,IAAMqO,WAAP,UACE,cAACvC,EAAD,MAEFmC,K","file":"static/js/main.e1bc928e.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport { extend, useThree, useFrame } from \"@react-three/fiber\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\nimport { SSAOPass } from \"three/examples/jsm/postprocessing/SSAOPass\";\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\r\nimport { FXAAShader } from \"three/examples/jsm/shaders/FXAAShader\";\r\n\r\nextend({ EffectComposer, ShaderPass, RenderPass, SSAOPass, UnrealBloomPass });\r\n\r\nexport default function Effects() {\r\n  const composer = useRef();\r\n  const { scene, gl, size, camera } = useThree();\r\n  useEffect(() => void composer?.current?.setSize(size.width, size.height), [\r\n    size\r\n  ]);\r\n  useFrame(() => composer?.current?.render(), 2);\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n\r\n      <shaderPass\r\n        attachArray=\"passes\"\r\n        args={[FXAAShader]}\r\n        material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\r\n        renderToScreen\r\n      />\r\n      <sSAOPass\r\n        attachArray=\"passes\"\r\n        args={[scene, camera]}\r\n        kernelRadius={20}\r\n        maxDistance={0.3}\r\n        // minDistance={0.005}\r\n      />\r\n    </effectComposer>\r\n  );\r\n}\r\n","import create from \"zustand\";\r\nimport produce from \"immer\";\r\n\r\nconst water = \"#5EBFB5\";\r\nconst colorMap = [\r\n  \"#FCE0AE\", //\r\n  \"#F2B591\",\r\n  \"#A7A267\",\r\n  \"#656347\",\r\n  \"#9AA7AD\"\r\n];\r\n\r\nexport default create((set) => ({\r\n  colors: {\r\n    Water: {\r\n      value: 0.21,\r\n      color: \"#00a9ff\"\r\n    },\r\n    Shore: {\r\n      value: 0.01,\r\n      color: \"#ffd68f\"\r\n    },\r\n    Beach: {\r\n      value: 0.04,\r\n      color: \"#efb28f\"\r\n    },\r\n    Shrub: {\r\n      value: 0.1,\r\n      color: \"#9ea667\"\r\n    },\r\n    Forest: {\r\n      value: 0.29,\r\n      color: \"#586647\"\r\n    },\r\n    Stone: {\r\n      value: 0.36,\r\n      color: \"#656565\"\r\n    },\r\n    Snow: {\r\n      value: 0.6,\r\n      color: \"#9aa7ad\"\r\n    }\r\n  },\r\n\r\n  setColorValue: (key, value) =>\r\n    set(\r\n      produce((state) => {\r\n        state.colors[key].value = value;\r\n      })\r\n    ),\r\n  setColor: (key, color) =>\r\n    set(\r\n      produce((state) => {\r\n        state.colors[key].color = color;\r\n      })\r\n    ),\r\n\r\n  generation: {\r\n    Seed: Math.random(),\r\n    Height: 1,\r\n    Scale: 0.2,\r\n    Detail: 0.5,\r\n    Fuzzyness: 0.25\r\n    // Contrast: 0.5,\r\n  },\r\n\r\n  setGeneration: (key, value) =>\r\n    set(\r\n      produce((state) => {\r\n        state.generation[key] = value;\r\n      })\r\n    ),\r\n\r\n  general: {\r\n    Trees: false,\r\n    Grass: false,\r\n    Clouds: false\r\n  },\r\n  setGeneral: (key, value) =>\r\n    set(\r\n      produce((state) => {\r\n        state.general[key] = value;\r\n      })\r\n    )\r\n}));\r\n","import { useMemo } from \"react\";\r\nimport { MathUtils, Vector2 } from \"three\";\r\nimport { FBM } from \"three-noise\";\r\nimport appState from \"../state/appState\";\r\n\r\nexport default function useFBM(seaLevel, settings) {\r\n  const generation = appState((s) => s.generation);\r\n\r\n  const fbm = useMemo(\r\n    () =>\r\n      new FBM({\r\n        seed: generation.Seed,\r\n        lacunarity: generation.Detail * 4,\r\n        persistance: generation.Fuzzyness * 2,\r\n        // redistribution: generation.Contrast * 2,\r\n        ...settings,\r\n      }),\r\n    [settings, generation]\r\n  );\r\n\r\n  return (vec3) =>\r\n    Math.pow(\r\n      MathUtils.mapLinear(\r\n        fbm.get2(new Vector2(vec3.x, vec3.y)),\r\n        -1, //\r\n        1,\r\n        0,\r\n        1\r\n      ),\r\n      2\r\n    );\r\n}\r\n","import { useMemo } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nexport default function BeveledHexagonGeometry({ size = 10, ...rest }) {\r\n  const shape = useMemo(() => {\r\n    const shape = new THREE.Shape();\r\n    const sides = 6,\r\n      Xcenter = 0,\r\n      Ycenter = 0;\r\n\r\n    shape.moveTo(Xcenter + size * Math.cos(0), Ycenter + size * Math.sin(0));\r\n\r\n    for (let i = 1; i <= sides; i += 1) {\r\n      shape.lineTo(\r\n        Xcenter + size * Math.cos((i * 2 * Math.PI) / sides),\r\n        Ycenter + size * Math.sin((i * 2 * Math.PI) / sides)\r\n      );\r\n    }\r\n    return shape;\r\n  }, [size]);\r\n\r\n  const settings = useMemo(\r\n    () => ({\r\n      steps: 2,\r\n      depth: 10,\r\n      bevelEnabled: true,\r\n      bevelThickness: 0.2,\r\n      bevelSize: 0.5,\r\n      bevelOffset: 0,\r\n      bevelSegments: 8,\r\n    }),\r\n    []\r\n  );\r\n\r\n  return <extrudeGeometry args={[shape, settings]} {...rest} />;\r\n}\r\n","import { useCallback, useEffect, useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { FrontSide } from \"three\";\r\nimport useColor from \"../hooks/useColor\";\r\nimport useFBM from \"../hooks/useFBM\";\r\nimport appState from \"../state/appState\";\r\nimport BeveledHexagonGeometry from \"./BeveledHexagonGeometry\";\r\n\r\nimport { useSpring } from \"@react-spring/three\";\r\n\r\nconst tempV4 = new THREE.Object3D();\r\n\r\nexport default function Terrain({ points }) {\r\n  const colors = appState((s) => s.colors);\r\n  const generation = appState((s) => s.generation);\r\n\r\n  const noise = useFBM(colors.Water.value);\r\n  const ref = useRef();\r\n  const color = useColor(colors.Water.value);\r\n\r\n  const generate = useCallback(\r\n    (scale) => {\r\n      if (ref.current) {\r\n        const mesh = ref.current;\r\n\r\n        points.forEach((point, i) => {\r\n          tempV4.position.copy(point);\r\n          tempV4.scale.setScalar(0.01);\r\n\r\n          if (scale) {\r\n            tempV4.scale.multiplyScalar(scale);\r\n          }\r\n\r\n          tempV4.updateMatrix();\r\n\r\n          const p = tempV4.position.clone().multiplyScalar(generation.Scale);\r\n          let n = noise(p) * generation.Height;\r\n          const c = color(n);\r\n\r\n          if (n <= colors.Water.value) n = colors.Water.value;\r\n\r\n          tempV4.scale.z *= 40 * n;\r\n\r\n          tempV4.updateMatrix();\r\n          mesh.setMatrixAt(i, tempV4.matrix);\r\n\r\n          mesh.setColorAt(i, c);\r\n        });\r\n        mesh.instanceMatrix.needsUpdate = true;\r\n        mesh.instanceColor.needsUpdate = true;\r\n      }\r\n    },\r\n    [points, noise, color, colors, generation]\r\n  );\r\n\r\n  const { scale } = useSpring({\r\n    scale: 1,\r\n    onChange: ({ value: { scale } }) => {\r\n      generate(scale);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    scale.start({ from: 0, to: 1 });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    generate();\r\n  }, [generate]);\r\n\r\n  return (\r\n    <group>\r\n      <instancedMesh\r\n        castShadow\r\n        receiveShadow\r\n        ref={ref}\r\n        args={[null, null, points.length]}\r\n      >\r\n        <BeveledHexagonGeometry />\r\n        <meshPhongMaterial\r\n          shadowSide={FrontSide} //\r\n          side={FrontSide} //\r\n        />\r\n      </instancedMesh>\r\n    </group>\r\n  );\r\n}\r\n","import { useControls } from \"leva\";\r\nimport { Color, MathUtils } from \"three\";\r\nimport appState from \"../state/appState\";\r\n\r\nexport default function useColor() {\r\n  const colors = appState((s) => s.colors);\r\n\r\n  return (height) => {\r\n    const color = (() => {\r\n      if (height <= colors.Water.value) {\r\n        return new Color(colors.Water.color);\r\n      } else if (height <= colors.Water.value + colors.Shore.value) {\r\n        return new Color(colors.Shore.color);\r\n      } else if (height <= colors.Water.value + colors.Beach.value) {\r\n        return new Color(colors.Beach.color);\r\n      } else if (height <= colors.Water.value + colors.Shrub.value) {\r\n        return new Color(colors.Shrub.color);\r\n      } else if (height <= colors.Water.value + colors.Forest.value) {\r\n        return new Color(colors.Forest.color);\r\n      } else if (height <= colors.Water.value + colors.Stone.value) {\r\n        return new Color(colors.Stone.color);\r\n      } else {\r\n        return new Color(colors.Snow.color);\r\n      }\r\n    })();\r\n\r\n    let a = {\r\n      h: 0,\r\n      s: 1,\r\n      l: 1,\r\n    };\r\n    const hsl = color.getHSL(a);\r\n    color.setHSL(\r\n      hsl.h,\r\n      hsl.s * 1.7,\r\n      hsl.l *\r\n        (height <= colors.Water.value\r\n          ? MathUtils.mapLinear(\r\n              Math.pow(1 - (colors.Water.value - height) * 1.3, 6),\r\n              0,\r\n              1,\r\n              0,\r\n              1.4\r\n            )\r\n          : 1)\r\n    );\r\n\r\n    return color;\r\n  };\r\n}\r\n","import { useHelper } from \"@react-three/drei\";\r\nimport { useRef } from \"react\";\r\nimport { DirectionalLightHelper } from \"three\";\r\n\r\nexport default function Lights() {\r\n  const ref = useRef();\r\n\r\n  // useHelper(ref, DirectionalLightHelper);\r\n\r\n  return (\r\n    <group>\r\n      <hemisphereLight\r\n        args={[\r\n          \"white\", //\r\n          \"darkslategrey\",\r\n          0.4,\r\n        ]}\r\n      />\r\n      <directionalLight\r\n        ref={ref}\r\n        castShadow //\r\n        position={[-5, 3, -5]}\r\n        intensity={2.5}\r\n        shadowBias={-0.0002}\r\n        color=\"orange\"\r\n      />\r\n      <directionalLight\r\n        position={[1, 1, 1]} //\r\n        intensity={0.3}\r\n      />\r\n    </group>\r\n  );\r\n}\r\n","import { button, Leva, useControls } from \"leva\";\r\nimport { useEffect } from \"react\";\r\nimport { Color } from \"three\";\r\nimport useGPUTier from \"../hooks/useGPUTier\";\r\nimport appState from \"../state/appState\";\r\n\r\nexport default function GUI() {\r\n  const colors = appState((s) => s.colors);\r\n  const generation = appState((s) => s.generation);\r\n  const general = appState((s) => s.general);\r\n  const setColorValue = appState((s) => s.setColorValue);\r\n  const setGeneral = appState((s) => s.setGeneral);\r\n  const setColor = appState((s) => s.setColor);\r\n  const setGeneration = appState((s) => s.setGeneration);\r\n\r\n  const tier = useGPUTier();\r\n\r\n  const [, set2] = useControls(\r\n    \"General\",\r\n    () => {\r\n      const res = {};\r\n      Object.keys(general).forEach((param) => {\r\n        res[param] = {\r\n          value: general[param],\r\n\r\n          onChange: (v) => setGeneral(param, v)\r\n        };\r\n      });\r\n\r\n      return res;\r\n    },\r\n    [general, setGeneral]\r\n  );\r\n\r\n  useControls(\r\n    \"Color\",\r\n    () => {\r\n      const res = {};\r\n      Object.keys(colors).forEach((color) => {\r\n        res[color] = {\r\n          value: colors[color].value,\r\n          min: 0,\r\n          max: 1,\r\n          onChange: (v) => setColorValue(color, v)\r\n        };\r\n\r\n        res[color + \" Color\"] = {\r\n          value: colors[color].color,\r\n          onChange: (v) => setColor(color, v)\r\n        };\r\n      });\r\n\r\n      return res;\r\n    },\r\n    [colors, setColorValue, setColor]\r\n  );\r\n\r\n  const [_, set] = useControls(\r\n    \"Generation\",\r\n    () => {\r\n      const res = {};\r\n      Object.keys(generation).forEach((param) => {\r\n        res[param] = {\r\n          value: generation[param],\r\n          min: 0,\r\n          max: 1,\r\n          onChange: (v) => setGeneration(param, v)\r\n        };\r\n      });\r\n\r\n      return res;\r\n    },\r\n    [generation, setGeneration]\r\n  );\r\n\r\n  useControls(\r\n    {\r\n      Regenerate: button(() => set({ Seed: Math.random() }))\r\n    },\r\n    [set]\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log(tier);\r\n    if (tier) {\r\n      if (tier > 1) {\r\n        set2({ Trees: true });\r\n      }\r\n      if (tier > 2) {\r\n        set2({ Grass: true });\r\n      }\r\n      if (tier < 1) {\r\n        set2({ Trees: false, Grass: false });\r\n      }\r\n    }\r\n  }, [tier]);\r\n\r\n  return <Leva collapsed />;\r\n}\r\n","import { getGPUTier } from \"detect-gpu\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function useGPUTier() {\r\n  const [gpuTier, setGpuTier] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setGpuTier((await getGPUTier()).tier);\r\n    })();\r\n  }, []);\r\n\r\n  return gpuTier;\r\n}\r\n","import { useMemo } from \"react\";\r\nimport { Color } from \"three\";\r\nimport appState from \"../state/appState\";\r\n\r\nexport default function useTreeColors() {\r\n  const colors = appState((s) => s.colors);\r\n\r\n  const treeColors = useMemo(\r\n    () => ({\r\n      regular: [\r\n        \"#557C55\", //\r\n        \"#32502E\", //\r\n        \"#8A8635\", //\r\n      ],\r\n      snow: [\r\n        \"#FEF5ED\", //\r\n      ],\r\n    }),\r\n    []\r\n  );\r\n\r\n  return (height) => {\r\n    if (height >= colors.Water.value + colors.Stone.value) {\r\n      const r =\r\n        treeColors.snow[Math.floor(Math.random() * treeColors.snow.length)];\r\n      return new Color(r);\r\n    }\r\n    const r =\r\n      treeColors.regular[Math.floor(Math.random() * treeColors.regular.length)];\r\n    return new Color(r);\r\n  };\r\n}\r\n","import React, { useEffect, useMemo, useRef } from \"react\";\r\nimport { useGLTF, useTexture } from \"@react-three/drei\";\r\nimport useHexagonScatter from \"../hooks/useHexagonScatter\";\r\nimport * as THREE from \"three\";\r\nimport useFBM from \"../hooks/useFBM\";\r\nimport appState from \"../state/appState\";\r\nimport { FrontSide, MathUtils } from \"three\";\r\nimport { Vector3 } from \"three\";\r\nimport useTreeColors from \"../hooks/useTreeColors\";\r\n\r\nconst tempV4 = new THREE.Object3D();\r\n\r\nexport default function Trees({ points }) {\r\n  const group = useRef();\r\n  const colors = appState((s) => s.colors);\r\n  const generation = appState((s) => s.generation);\r\n\r\n  const { nodes, materials } = useGLTF(\"/models/trees.glb\");\r\n  const color = useTreeColors();\r\n  const noise = useFBM(colors.Water.value);\r\n  const noise2 = useFBM(colors.Water.value, {\r\n    seed: generation.Seed * 200\r\n  });\r\n\r\n  const refs = useRef([]);\r\n\r\n  const pointsClone = useMemo(() => {\r\n    const pointsClone = [...points];\r\n    pointsClone.forEach((_, i) => {\r\n      if (Math.random() < 0.6) {\r\n        removeItemOnce(pointsClone, i);\r\n      }\r\n    });\r\n    return pointsClone;\r\n  }, [points]);\r\n\r\n  useEffect(() => {\r\n    refs.current.forEach((mesh) => {\r\n      pointsClone.forEach((point, i) => {\r\n        tempV4.position.copy(point.clone().multiplyScalar(100));\r\n        tempV4.updateMatrix();\r\n\r\n        const p = point.clone().multiplyScalar(generation.Scale);\r\n        let n = noise(p) * generation.Height;\r\n\r\n        tempV4.position.z = n * 400;\r\n        tempV4.position.x += MathUtils.randFloat(-4, 4);\r\n        tempV4.position.y += MathUtils.randFloat(-4, 4);\r\n\r\n        tempV4.rotation.x = Math.PI;\r\n\r\n        if (\r\n          (n > colors.Water.value + colors.Shrub.value &&\r\n            n < colors.Water.value + colors.Forest.value) ||\r\n          n > colors.Water.value + colors.Stone.value\r\n        ) {\r\n          tempV4.scale.setScalar(\r\n            MathUtils.mapLinear(noise2(point), 0, 1, 0.02, 0.09)\r\n          );\r\n        } else {\r\n          tempV4.scale.setScalar(0);\r\n        }\r\n\r\n        tempV4.updateMatrix();\r\n        mesh.setMatrixAt(i, tempV4.matrix);\r\n\r\n        const c = color(n);\r\n        mesh.setColorAt(i, c);\r\n      });\r\n      mesh.instanceMatrix.needsUpdate = true;\r\n      mesh.instanceColor.needsUpdate = true;\r\n    });\r\n  }, [refs, pointsClone, noise, noise2, colors, generation]);\r\n\r\n  return (\r\n    <group ref={group} dispose={null}>\r\n      <instancedMesh\r\n        ref={(r) => r && refs.current.push(r)}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.SM_Env_Tree_Pine_01.geometry}\r\n        rotation={[0, 0, 0]}\r\n        scale={[0.01, 0.01, 0.01]}\r\n        args={[null, null, pointsClone.length]}\r\n      >\r\n        <meshPhongMaterial\r\n          shadowSide={FrontSide} //\r\n          side={FrontSide} //\r\n        />\r\n      </instancedMesh>\r\n      <instancedMesh\r\n        ref={(r) => r && refs.current.push(r)}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.SM_Env_Tree_Pine_02002.geometry}\r\n        rotation={[0, 0, 0]}\r\n        scale={[0.01, 0.01, 0.01]}\r\n        args={[null, null, pointsClone.length]}\r\n      >\r\n        <meshPhongMaterial\r\n          shadowSide={FrontSide} //\r\n          side={FrontSide} //\r\n        />\r\n      </instancedMesh>\r\n    </group>\r\n  );\r\n}\r\n\r\nuseGLTF.preload(\"/models/trees.glb\");\r\n\r\nfunction removeItemOnce(arr, index) {\r\n  if (index > -1) {\r\n    arr.splice(index, 1);\r\n  }\r\n  return arr;\r\n}\r\n","import React, { useEffect, useMemo, useRef } from \"react\";\r\nimport { useGLTF, useTexture } from \"@react-three/drei\";\r\nimport useHexagonScatter from \"../hooks/useHexagonScatter\";\r\nimport * as THREE from \"three\";\r\nimport useFBM from \"../hooks/useFBM\";\r\nimport appState from \"../state/appState\";\r\nimport { FrontSide, MathUtils } from \"three\";\r\nimport { Vector3 } from \"three\";\r\nimport useTreeColors from \"../hooks/useTreeColors\";\r\n\r\nconst tempV4 = new THREE.Object3D();\r\n\r\nexport default function Grass({ points }) {\r\n  const group = useRef();\r\n  const colors = appState((s) => s.colors);\r\n  const generation = appState((s) => s.generation);\r\n\r\n  const { nodes, materials } = useGLTF(\"/models/grass.glb\");\r\n  const color = useTreeColors();\r\n  const noise = useFBM(colors.Water.value);\r\n  const noise2 = useFBM(colors.Water.value, {\r\n    seed: generation.Seed * 200\r\n  });\r\n\r\n  const refs = useRef([]);\r\n\r\n  const pointsClone = useMemo(() => {\r\n    const pointsClone = [...points];\r\n    pointsClone.forEach((_, i) => {\r\n      if (Math.random() < 0.6) {\r\n        removeItemOnce(pointsClone, i);\r\n      }\r\n    });\r\n    pointsClone.push(...pointsClone, ...pointsClone);\r\n    return pointsClone;\r\n  }, [points]);\r\n\r\n  useEffect(() => {\r\n    refs.current.forEach((mesh) => {\r\n      pointsClone.forEach((point, i) => {\r\n        tempV4.position.copy(point.clone().multiplyScalar(100));\r\n        tempV4.updateMatrix();\r\n\r\n        const p = point.clone().multiplyScalar(generation.Scale);\r\n        let n = noise(p) * generation.Height;\r\n\r\n        tempV4.position.z = n * 400;\r\n        tempV4.position.x += MathUtils.randFloat(-5, 5);\r\n        tempV4.position.y += MathUtils.randFloat(-5, 5);\r\n\r\n        tempV4.rotation.x = Math.PI;\r\n\r\n        if (\r\n          n > colors.Water.value + colors.Beach.value &&\r\n          n < colors.Water.value + colors.Forest.value\r\n        ) {\r\n          tempV4.scale.setScalar(\r\n            MathUtils.mapLinear(noise2(point), 0, 1, 0.1, 0.1)\r\n          );\r\n        } else {\r\n          tempV4.scale.setScalar(0);\r\n        }\r\n\r\n        tempV4.updateMatrix();\r\n        mesh.setMatrixAt(i, tempV4.matrix);\r\n\r\n        const c = color(n);\r\n        mesh.setColorAt(i, c);\r\n      });\r\n      mesh.instanceMatrix.needsUpdate = true;\r\n      mesh.instanceColor.needsUpdate = true;\r\n    });\r\n  }, [refs, pointsClone, noise, noise2, colors, generation]);\r\n\r\n  return (\r\n    <group ref={group} dispose={null}>\r\n      <instancedMesh\r\n        ref={(r) => r && refs.current.push(r)}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.SM_Env_Grass_Patch_03.geometry}\r\n        rotation={[0, 0, 0]}\r\n        scale={[0.01, 0.01, 0.01]}\r\n        position={[0, 0, 0.025]}\r\n        args={[null, null, pointsClone.length]}\r\n      >\r\n        <meshPhongMaterial\r\n          shadowSide={FrontSide} //\r\n          side={FrontSide} //\r\n        />\r\n      </instancedMesh>\r\n    </group>\r\n  );\r\n}\r\n\r\nuseGLTF.preload(\"/models/grass.glb\");\r\n\r\nfunction removeItemOnce(arr, index) {\r\n  if (index > -1) {\r\n    arr.splice(index, 1);\r\n  }\r\n  return arr;\r\n}\r\n","import React, { useEffect, useMemo, useRef } from \"react\";\r\nimport { useGLTF, useTexture } from \"@react-three/drei\";\r\nimport * as THREE from \"three\";\r\nimport { FrontSide, MathUtils } from \"three\";\r\nimport { Vector3 } from \"three\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\n\r\nconst tempV4 = new THREE.Object3D();\r\n\r\nfunction Clouds() {\r\n  const { nodes } = useGLTF(\"/models/cloud.glb\");\r\n\r\n  const refs = useRef([]);\r\n\r\n  const points = useMemo(() => {\r\n    return new Array(30).fill(0).map(() => ({\r\n      pos: new Vector3(\r\n        MathUtils.randFloat(-8, 8),\r\n        MathUtils.randFloat(-8, 8),\r\n        MathUtils.randFloat(-1, 1)\r\n      ).multiplyScalar(50),\r\n      scale: MathUtils.randFloat(0.1, 0.2),\r\n      rate: MathUtils.randFloat(5, 10)\r\n    }));\r\n  }, []);\r\n\r\n  useFrame((_, dt) => {\r\n    refs.current.forEach((mesh) => {\r\n      points.forEach((point, i) => {\r\n        tempV4.position.copy(point.pos.clone());\r\n\r\n        point.pos.x += dt * point.rate;\r\n        if (point.pos.x > 400) {\r\n          point.pos.x = -400;\r\n          point.pos.y = MathUtils.randFloat(-400, 400);\r\n        }\r\n\r\n        const scale = Math.pow(1 - Math.abs(point.pos.x / 400), 0.5);\r\n        tempV4.scale.setScalar(point.scale).multiplyScalar(scale);\r\n\r\n        tempV4.rotation.x = Math.PI;\r\n\r\n        tempV4.updateMatrix();\r\n        mesh.setMatrixAt(i, tempV4.matrix);\r\n      });\r\n      mesh.instanceMatrix.needsUpdate = true;\r\n    });\r\n  });\r\n\r\n  return (\r\n    <group dispose={null} position={[0, 0, 2.5]}>\r\n      <instancedMesh\r\n        ref={(r) => r && refs.current.push(r)}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.SM_Generic_Cloud_01.geometry}\r\n        rotation={[0, 0, 0]}\r\n        scale={[0.01, 0.01, 0.01]}\r\n        args={[null, null, points.length]}\r\n      >\r\n        <meshPhongMaterial\r\n          shadowSide={FrontSide} //\r\n          side={FrontSide} //\r\n        />\r\n      </instancedMesh>\r\n      <instancedMesh\r\n        ref={(r) => r && refs.current.push(r)}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.SM_Generic_Cloud_02.geometry}\r\n        rotation={[0, 0, 0]}\r\n        scale={[0.01, 0.01, 0.01]}\r\n        args={[null, null, points.length]}\r\n      >\r\n        <meshPhongMaterial\r\n          shadowSide={FrontSide} //\r\n          side={FrontSide} //\r\n        />\r\n      </instancedMesh>\r\n      <instancedMesh\r\n        ref={(r) => r && refs.current.push(r)}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.SM_Generic_Cloud_03.geometry}\r\n        rotation={[0, 0, 0]}\r\n        scale={[0.01, 0.01, 0.01]}\r\n        args={[null, null, points.length]}\r\n      >\r\n        <meshPhongMaterial\r\n          shadowSide={FrontSide} //\r\n          side={FrontSide} //\r\n        />\r\n      </instancedMesh>\r\n    </group>\r\n  );\r\n}\r\n\r\nuseGLTF.preload(\"/models/cloud.glb\");\r\n\r\nexport default React.memo(Clouds);\r\n","import React, { Suspense, useEffect, useRef } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { Environment, OrbitControls, Stats } from \"@react-three/drei\";\nimport \"./styles.css\";\nimport Helpers from \"./utils/Helpers\";\nimport Effects from \"./Effects\";\nimport Terrain from \"./components/ScatterHexagonMesh\";\nimport { PCFSoftShadowMap, sRGBEncoding } from \"three\";\nimport Lights from \"./components/Lights\";\nimport GUI from \"./components/GUI\";\nimport appState from \"./state/appState\";\nimport Trees from \"./components/Trees\";\nimport Grass from \"./components/Grass\";\nimport Clouds from \"./components/Clouds\";\nimport useHexagonScatter from \"./hooks/useHexagonScatter\";\n\nexport default function App() {\n  const points = useHexagonScatter(25);\n  const general = appState((s) => s.general);\n\n  return (\n    <>\n      <GUI />\n      <Canvas\n        shadows\n        gl={{\n          antialias: true,\n          toneMappingExposure: 0.5,\n          shadowMap: {\n            enabled: true,\n            type: PCFSoftShadowMap\n          },\n          outputEncoding: sRGBEncoding\n        }}\n        camera={{\n          position: [5, 6, 5]\n        }}\n      >\n        <Suspense fallback={null}>\n          <group rotation-x={-Math.PI / 2}>\n            {general.Trees && <Trees points={points} />}\n            {general.Grass && <Grass points={points} />}\n            {general.Clouds && <Clouds />}\n            <Terrain points={points} />\n          </group>\n          <Environment preset=\"sunset\" />\n          <OrbitControls autoRotate autoRotateSpeed={0.6} enablePan={false} />\n          {/* <Helpers /> */}\n          <Effects />\n          {/* <Stats /> */}\n        </Suspense>\n        <Lights />\n      </Canvas>\n      <div className=\"copy\">\n        Made with 🧡 by{\" \"}\n        <a target=\"_blank\" href=\"https://github.com/FarazzShaikh\">\n          Faraz Shaikh\n        </a>\n      </div>\n    </>\n  );\n}\n","import { useMemo } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nexport default function useHexagonScatter(\r\n  radius = 5, //\r\n  gap = 1\r\n) {\r\n  const points = useMemo(() => {\r\n    let pts = [];\r\n    pts.push(new THREE.Vector3());\r\n    let unit = gap * 0.176;\r\n\r\n    let angle = Math.PI / 3;\r\n    let axis = new THREE.Vector3(0, 0, 1);\r\n\r\n    let axisVector = new THREE.Vector3(0, -unit, 0);\r\n    let sideVector = new THREE.Vector3(0, unit, 0).applyAxisAngle(axis, -angle);\r\n    let tempV3 = new THREE.Vector3();\r\n    for (let seg = 0; seg < 6; seg++) {\r\n      for (let ax = 1; ax <= radius; ax++) {\r\n        for (let sd = 0; sd < ax; sd++) {\r\n          tempV3\r\n            .copy(axisVector)\r\n            .multiplyScalar(ax)\r\n            .addScaledVector(sideVector, sd)\r\n            .applyAxisAngle(axis, angle * seg);\r\n\r\n          pts.push(new THREE.Vector3().copy(tempV3));\r\n        }\r\n      }\r\n    }\r\n    return pts;\r\n  }, [radius, gap]);\r\n\r\n  return points;\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}